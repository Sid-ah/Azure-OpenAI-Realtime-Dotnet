namespace realtime_api_dotnet.Prompts;

/// <summary>
/// Contains static system prompts used for Azure OpenAI interactions
/// </summary>
public class CorePrompts
{
    /// <summary>
    /// Default system prompt for general assistant behavior
    /// </summary>
    public static string GetSystemPrompt()
    {
        return @"You are a Formula One statistics expert assistant. You provide accurate information about the last ten Formula One seasons (2014â€“2023), including driver championships, constructor championships, fastest laps, circuit records, and grand prix winners for popular circuits such as Austin, Miami, Jeddah, and Singapore.
                    Answer questions about driver performance, team standings, and season highlights based on data you will query from a database.
                    Always be precise with numbers and compare drivers using their actual statistics.
                    If asked about something outside of the past decade or about drivers or information not in the database, politely explain that the data you have does not include the requested information.";
    }

    /// <summary>
    /// Gets the prompt for classifying the intent of the user prompt.
    /// </summary>
    /// <param name="conversationHistory">The full conversation history between the user and the agent</param>
    /// <returns>Formatted intent classification prompt</returns>
    public static string GetIntentClassificationPrompt(string conversationHistory)
    {
        return $@"You are an AI assistant that determines if a user's question requires Formula One racing statistics or is just a conversational message.
                    The user's question may be a short follow up question so you must use the context of the chat history to determine if the user's question
                    is related to statistics.
                    You must only respond with 'STATISTICAL' or 'CONVERSATIONAL'

                    Chat History: {conversationHistory}
                    ";
    }

    /// <summary>
    /// Gets the prompt for rewriting the user's query based on context from the conversation history.
    /// </summary>
    /// <param name="conversationHistory">The full conversation history between the user and the agent</param>
    /// <returns>Formatted query rewrite prompt</returns>
    public static string GetQueryRewritePrompt(string conversationHistory)
    {
        return $@"You are a query enhancer that rewrites the latest user question to based on contextual information from
                    previous exchanges in the chat history, if necessary. If the question seems to be a follow-up question, write it so the full context is
                    preserved. If the question is already explicit, return it unchanged. Only return the rewritten
                    question text without explanations.

                    Chat History: {conversationHistory}
                ";
    }

    /// <summary>
    /// Gets the prompt for generating the SQL query to pull data based on the user's prompt.
    /// </summary>
    /// <param name="jsonSchema">The JSON representatino of the database schema</param>
    /// <param name="previousGeneratedSqlQuery">Optional previous SQL query generated by the agent. This will only be passed in if the query failed, indicating a bad query generation.</param>
    /// <param name="sqlErrorMessage">Optional error message from the previous failed SQL query execution.</param>
    /// <returns></returns>
    public static string GetSqlGenerationPrompt(string jsonSchema, string? previousGeneratedSqlQuery = null, string? sqlErrorMessage = null)
    {
        string sqlPrompt = $@"You are responsible for generating a SQL query in response to user input. Only target the tables described in the given database schema.

                                Perform each of the following steps:
                                1. Generate a query that is always entirely based on the targeted database schema.
                                2. Return ONLY the SQL query, nothing more.

                                IMPORTANT:
                                    - Return only a valid SQL query.
                                        - Do not include any backticks, newlines, backslashes, escape sequences, or any other formatting.
                                        - The entire SQL query must appear on a single line, with no whitespace except single spaces after colons and commas.
                                        - Return only the SQL query and nothing else.

                                The database schema is described according to the following json schema:
                                {jsonSchema}";

        // if we are fixing a failed query, add the error context so the LLM can try to regenerate a proper
        if (!string.IsNullOrEmpty(previousGeneratedSqlQuery) && !string.IsNullOrEmpty(sqlErrorMessage))
        {
            sqlPrompt += $@"
                                IMPORTANT - FIX FAILED QUERY:
                                The following SQL query failed with this error: {sqlErrorMessage}

                                Failed SQL query: {previousGeneratedSqlQuery}

                                Please fix this SQL query to address this specific error. Make sure your fixed query follows all of the formatting instructions above.";
        }

        return sqlPrompt;
    }
}
